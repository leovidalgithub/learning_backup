.grid-container {
	width: 80%;
	height: 450px;
	margin: 0 auto;
	background-color:  lightgreen;
	padding: 20px;
	border: 1px solid black;
	display: grid;

	grid-template-rows: 25% 1fr 100px;
	/* grid-template-columns: 1fr auto 10% 150px; */
	/* grid-template-columns: 50% 20% 30%; */
	/* grid-template-columns: 50% repeat(2, 150px); */
	grid-template-columns: auto auto auto;

	/* grid-template-columns: 45% 20% auto; it works because is less than 100% */
	/* grid-template-columns: 1fr 20% auto; --> not working because there is a fr */
	/* justify-content: space-around; --> to make it work, the total space occupied by the elements must be less than 100% or not using fr */
}

.grid-container .box {
	border: 4px solid gray;
	background-color: lightgray;
	text-align: center;
	height: 100%;
	/* line-height: 150px; */
}

.grid-container .box.b1 {
	grid-column: 1/3;
	/* grid-row: 1/span 2; */
	/* grid-column: 1/ span 2; */

		/*
		grid-column works according to what "sizes" were defined using grid-template-columns:, but
		if more columns are indicated on grid-column, so that number of columns will be displayed
		i.e. grid-template-columns: auto auto; and grid-column: 1 / span 5 --> the grid layout will display 5 columns

		when using numbers like 1/3 --> the grid system is your friend --> inspector F12 - click on grid
		i.e. grid-template-columns: auto auto auto; (3 columns -> 4 points/lines)
		thus, indicating 1/3, the element will occupied 2 columns from point 1 to point 3
		both are equivalent: 1/3 and 1/ span 2
		*/

	background-color: #01a8a8;
}
.grid-container .box.b2 {
	background-color: #f5f5b9;
	grid-column: 3/4;
	grid-row: 1/3;
	/* same thing --> grid-area: 3 / 4 / 1 / 3; */
}
/* .grid-container .box.b3 {
}
.grid-container .box.b4 {
	grid-column: 2/4;
} */
.grid-container .box.b5 {
	background-color: lightcoral;
	grid-column: 1/4;
	/* same thing --> grid-column: 1/ span 3;  */
}